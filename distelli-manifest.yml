bmcgehee/eric-repro1:
### If building your Docker image with Distleli, place all Docker commands here.

  Build:

    - echo "Skipping build step, Jenkins handles this"
#    - echo "--Creating Docker Image--"
#    - sudo docker login -u "$DISTELLI_DOCKER_USERNAME" -p "$DISTELLI_DOCKER_PW" -e "$DISTELLI_DOCKER_EMAIL" $DISTELLI_DOCKER_ENDPOINT
#    - sudo docker build --quiet=false -t "$DISTELLI_DOCKER_REPO" "$DISTELLI_DOCKER_PATH"
#    - sudo docker tag "$DISTELLI_DOCKER_REPO" "$DISTELLI_DOCKER_REPO:$DISTELLI_BUILDNUM" 
#    - echo "--Pushing Docker Image--"
#    - echo "$DISTELLI_BUILDNUM"
#    - sudo docker push "$DISTELLI_DOCKER_REPO:$DISTELLI_BUILDNUM"

  PkgInclude:
    - '*' 

### In this example, we're injecting the DISTELLI_BUILDNUM into the JSON that will register a new task definition in ECS. The DISTELLI_BUILDNUM
### is the tag associated with the new Docker image that is to be deployed to ECS

  InstallTemplates:

    - ecs_task.json

### JQ (https://stedolan.github.io/jq/) is a powerful JSON parser used in the PostInstall steps
### 
### At the time of this writting, an update to the AWS CLI was needed in order to fully support ECS CLI commands

  PreInstall:

    - echo "---Starting PreInstall steps---"
    #- sudo yum install jq -y
    #- sudo /usr/local/bin/pip install --upgrade pip 
    #- sudo /usr/local/bin/pip install --upgrade awscli
    - echo "---Distelli Debug to Add---"
    - ls -al
    #- cat ecs_task.json
    - echo "DISTELLI_DOCKER_REPO = $DISTELLI_DOCKER_REPO"
    - echo "DISTELLI_BUILDNUM = $DISTELLI_BUILDNUM"

  PostInstall:

    - echo "---Running PostInstall steps---"
    - echo "DISTELLI_DOCKER_REPO = $DISTELLI_DOCKER_REPO"
    - echo "DISTELLI_BUILDNUM = $DISTELLI_BUILDNUM"
    
    - ls -al
    
    - cat ecs_task.json
    - echo "========    THE DISTELLI BUILD NUMBER IS $DISTELLI_BUILDNUM    ========"
    - echo "========    Running ECS list clusters command    ========"

### This command is here to verify that your AWS CLI is setup correctly

    #- echo "aws ecs list-clusters --region=${AWSRegion}"
    #- sudo aws ecs list-clusters --region=${AWSRegion}
    #- echo "========    Running ecs register-task-definition command    ========"

### This command will create the new task definition in ECS. The output JSON is captured to a local file called revisionID.json

    #- echo "aws ecs register-task-definition --region=${AWSRegion} --cli-input-json file://ecs_task.json"
    #- sudo aws ecs register-task-definition --region=${AWSRegion} --cli-input-json file://ecs_task.json | tee revisionID.json

### This command uses JQ to parse our the revision ID from the register-task-definition command and set it up as an environment variable

    #- revisionID=$(cat revisionID.json | jq '.taskDefinition.revision')

    - echo "========    THE REVISION ID IS $revisionID    ========"
    - echo "========    Running ecs update-service command    ========"

### This command will run the update-service command which tells ECS to deploy the newly built container

    #- echo "aws ecs update-service --region=$AWSRegion --service ${ECSServiceName} --cluster ${ECSClusterName} --task-definition ${ECSTaskDefinitionName}:${revisionID}"
    #- sudo aws ecs update-service --region=$AWSRegion --service ${ECSServiceName} --cluster ${ECSClusterName} --task-definition ${ECSTaskDefinitionName}:${revisionID}
